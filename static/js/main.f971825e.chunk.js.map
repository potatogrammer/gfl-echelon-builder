{"version":3,"sources":["Stores/DollStore.js","Services/Doll.js","Components/InfoCard/InfoCard.js","Components/SelectBar/SelectBar.js","App.js","serviceWorker.js","index.js"],"names":["dolls","window","gfcore","DollByTypes","Any","ar","hg","mg","rf","sg","smg","i","length","doll","type","push","getDollCodename","name","results","RegExp","test","codename","InfoCard","props","displayContent","a","className","ref","src","Object","keys","map","key","Fragment","href","Option","Select","SelectBar","handleSelectBar","handleSearchButton","defaultValue","onChange","value","style","backgroundColor","color","showSearch","width","placeholder","notFoundContent","optionFilterProp","filterOption","input","option","result","Header","Layout","Content","Sider","Footer","getItems","count","offset","Array","from","v","k","id","content","App","id2List","droppable","droppable2","getList","state","onDragEnd","source","destination","droppableId","items","list","startIndex","endIndex","splice","removed","reorder","index","selected","setState","droppableSource","droppableDestination","sourceClone","destClone","move","searchItem","stats","console","log","getDollStats","searchCategory","createDraggableTask","newItems","currentCard","this","provided","snapshot","innerRef","item","draggableId","draggableProps","dragHandleProps","padding","margin","minHeight","isDragging","draggableStyle","userSelect","grid","background","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f971825e.chunk.js","sourcesContent":["import { dolls } from \"../Services/Doll\";\n\nconst DollByTypes = {\n  Any: [],\n  ar: [],\n  hg: [],\n  mg: [],\n  rf: [],\n  sg: [],\n  smg: [],\n};\n\nfor (let i = 0; i < dolls.length; i++) {\n  const doll = dolls[i];\n  DollByTypes[doll.type].push(doll);\n  DollByTypes[\"Any\"].push(doll);\n}\n\nexport function getDollCodename(type, name) {\n  const results = [];\n  for (let i = 0; i < DollByTypes[type].length; i++) {\n    const pattern = new RegExp(`^${name}`, \"i\");\n    if (pattern.test(DollByTypes[type][i].codename))\n      results.push(DollByTypes[type][i].codename);\n  }\n  if (results.length === 0) return \"Doll Not Found\";\n  else {\n    return results;\n  }\n}\n\nexport function getDollStats(type, name) {\n  for (let i = 0; i < DollByTypes[type].length; i++) {\n    const pattern = new RegExp(`^${name}`, \"i\");\n    if (pattern.test(DollByTypes[type][i].codename)) {\n      console.log(DollByTypes[type][i]);\n      return [name, DollByTypes[type][i].stats];\n    }\n  }\n}\n","const gfcore = window.gfcore;\n\nexport const dolls = gfcore.dolls;\n","import React from \"react\";\nimport \"./InfoCard.css\";\n\nconst InfoCard = (props) => {\n  const { displayContent, a } = props;\n  return displayContent.length ? (\n    <div className=\"box\" ref={a}>\n      <div className=\"box-img\">\n        <img\n          className=\"img\"\n          src=\"https://en.gfwiki.com/images/2/2c/Infobox_border.png\"\n        />\n      </div>\n      <div className=\"content\">\n        <>\n          {displayContent[0]}\n          <p>\n            {Object.keys(displayContent[1]).map((key) => (\n              <React.Fragment>\n                {key}: {displayContent[1][key]}\n                <br />\n              </React.Fragment>\n            ))}\n          </p>\n        </>\n      </div>\n      <div className=\"button\">\n        <a className=\"b1\" href=\"#\">\n          Adjust Stats\n        </a>\n      </div>\n    </div>\n  ) : (\n    <></>\n  );\n};\n\nexport default InfoCard;\n","import React from \"react\";\nimport { Select } from \"antd\";\nimport \"./SelectBar.css\";\nconst { Option } = Select;\nconst SelectBar = (props) => {\n  const { handleSelectBar, handleSearchButton, results } = props;\n  return (\n    <div className=\"select-bar\">\n      <Select\n        defaultValue=\"Any\"\n        className=\"select-bar-category\"\n        onChange={(value) => handleSelectBar(value)}\n        style={{ backgroundColor: \"#ffcc01\", color: \"#f0f0f0\" }}\n      >\n        <Option value=\"Any\">Any</Option>\n        <Option value=\"ar\">AR</Option>\n        <Option value=\"hg\">HG</Option>\n        <Option value=\"mg\">MG</Option>\n        <Option value=\"rf\">RF</Option>\n        <Option value=\"sg\">SG</Option>\n        <Option value=\"smg\">SMG</Option>\n      </Select>\n      <Select\n        className=\"select-bar-search\"\n        defaultValue=\"No Gun Selected\"\n        showSearch\n        style={{ width: 200 }}\n        placeholder=\"Enter gun name\"\n        onChange={(value) => handleSearchButton(value)}\n        notFoundContent=\"Gun Not Found\"\n        optionFilterProp=\"value\"\n        filterOption={(input, option) => {\n          const pattern = new RegExp(`^${input}`, \"i\");\n          return pattern.test(option.value);\n        }}\n      >\n        {results.map((result) => (\n          <Option value={result}>{result}</Option>\n        ))}\n      </Select>\n    </div>\n  );\n};\n\nexport default SelectBar;\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport { getDollCodename, getDollStats } from \"./Stores/DollStore\";\nimport InfoCard from \"./Components/InfoCard/InfoCard\";\nimport { Layout } from \"antd\";\nimport SelectBar from \"./Components/SelectBar/SelectBar\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map((k) => ({\n    id: `item-${k + offset}`,\n    content: ``,\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"none\" : \"#f0b001\",\n  // styles we need to apply on draggables\n  ...draggableStyle,\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchCategory: \"Any\",\n      results: [],\n      displayContent: [],\n      currentCard: 0,\n      items: [],\n      selected: getItems(1, 5),\n    };\n  }\n\n  id2List = {\n    droppable: \"items\",\n    droppable2: \"selected\",\n  };\n\n  getList = (id) => this.state[this.id2List[id]];\n\n  onDragEnd = (result) => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      let state = { items };\n\n      if (source.droppableId === \"droppable2\") {\n        state = { selected: items };\n      }\n\n      this.setState(state);\n    } else {\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      this.setState({\n        items: result.droppable,\n        selected: result.droppable2,\n      });\n    }\n  };\n\n  handleSearchButton = (searchItem) => {\n    const stats = getDollStats(this.state.searchCategory, searchItem);\n    this.setState({ displayContent: stats }, () =>\n      this.createDraggableTask(this.state.displayContent)\n    );\n  };\n\n  createDraggableTask = (stats) => {\n    const newItems = this.state.items;\n    newItems.push({\n      id: `item-${this.state.currentCard}`,\n      content: `${stats[0]}`,\n    });\n\n    this.setState({\n      items: newItems,\n      currentCard: this.state.currentCard + 1,\n    });\n  };\n\n  handleSelectBar = (value) => {\n    this.setState({\n      searchCategory: value,\n      results: getDollCodename(value, \"\"),\n    });\n  };\n\n  componentDidMount() {\n    this.setState({ results: getDollCodename(this.state.searchCategory, \"\") });\n  }\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Layout>\n          <Header className=\"header\"></Header>\n          <Layout className=\"main\">\n            <Sider width={280} className=\"sider\">\n              <SelectBar\n                handleSelectBar={this.handleSelectBar}\n                handleSearchButton={this.handleSearchButton}\n                results={this.state.results}\n              />\n              <Droppable droppableId=\"droppable\">\n                {(provided, snapshot) => (\n                  <div ref={provided.innerRef}>\n                    {this.state.items.map((item, index) => (\n                      <Draggable\n                        key={item.id}\n                        draggableId={item.id}\n                        index={index}\n                      >\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                          >\n                            <InfoCard\n                              displayContent={this.state.displayContent}\n                            />\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </Sider>\n            <Layout style={{ padding: \"0 24px 24px\" }}>\n              <Content\n                className=\"main-content\"\n                style={{\n                  padding: 24,\n                  margin: 0,\n                  minHeight: 280,\n                }}\n              >\n                <Droppable className=\"destination\" droppableId=\"droppable2\">\n                  {(provided, snapshot) => (\n                    <div ref={provided.innerRef}>\n                      {this.state.selected.map((item, index) => (\n                        <Draggable\n                          key={item.id}\n                          draggableId={item.id}\n                          index={index}\n                        >\n                          {(provided, snapshot) => (\n                            <div\n                              ref={provided.innerRef}\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              style={getItemStyle(\n                                snapshot.isDragging,\n                                provided.draggableProps.style\n                              )}\n                            >\n                              {item.content}\n                            </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                  )}\n                </Droppable>\n              </Content>\n            </Layout>\n          </Layout>\n        </Layout>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}